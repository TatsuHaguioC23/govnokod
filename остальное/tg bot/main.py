# -*- coding: utf8 -*-
################################################################################################################################
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
#################################################################################################################################

######################################################################
from aiogram.dispatcher import FSMContext                            ## –¢–û, –ß–ï–ì–û –í–´ –ñ–î–ê–õ–ò - FSM
from aiogram.dispatcher.filters import Command                        ## –¢–û, –ß–ï–ì–û –í–´ –ñ–î–ê–õ–ò - FSM
from aiogram.contrib.fsm_storage.memory import MemoryStorage        ## –¢–û, –ß–ï–ì–û –í–´ –ñ–î–ê–õ–ò - FSM
from aiogram.dispatcher.filters.state import StatesGroup, State        ## –¢–û, –ß–ï–ì–û –í–´ –ñ–î–ê–õ–ò - FSM
######################################################################

######################
import config        ## –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –ò–ó –§–ê–ô–õ–û–í config.py
import keyboard        ## –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –ò–ó –§–ê–ô–õ–û–í keyboard.py
######################

import logging # –ü–†–û–°–¢–û –í–´–í–û–î–ò–¢ –í –ö–û–ù–°–û–õ–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ, –ö–û–ì–î–ê –ë–û–¢ –ó–ê–ü–£–°–¢–ò–¢–°–Ø

storage = MemoryStorage() # FOR FSM
bot = Bot(token=config.botkey, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)

logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s',
                    level=logging.INFO,
                    )

@dp.message_handler(Command("start"), state=None)
async def welcome(message):
    joinedFile = open("user.txt","r")
    joinedUsers = set ()
    for line in joinedFile:
        joinedUsers.add(line.strip())
    if not str(message.chat.id) in joinedUsers:
        joinedFile = open("user.txt","a")
        joinedFile.write(str(message.chat.id)+ "\n")
        joinedUsers.add(message.chat.id)
    joinedFile = open("users.txt","r")
    joinedUsers = set ()
    for line in joinedFile:
        joinedUsers.add(line.strip())
    if not str(message.chat.id) in joinedUsers:
        joinedFile = open("users.txt","a")
        joinedFile.write(str(message.chat.id)+ " --> " +str(message.from_user.first_name)+ "\n")
        joinedUsers.add(message.chat.id)


    await bot.send_message(message.chat.id, f"–î–∞—Ä–æ–≤–∞, *{message.from_user.first_name}*.", reply_markup=keyboard.start, parse_mode='Markdown')


@dp.message_handler(commands=['spam'])
async def rassilka(message):
    if message.chat.id == config.admin:
        await bot.send_message(message.chat.id, f"*–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å \n–Ø —Å–∫–∞–∂—É, –∫–æ–≥–¥–∞ –¥–æ–∫–∏–¥–∞—é—Å—å*", parse_mode='Markdown')
        receive_users, block_users = 0, 0
        joinedFile = open ("user.txt", "r")
        joinedUsers = set ()
        for line in joinedFile:
            joinedUsers.add(line.strip())
        joinedFile.close()
        for user in joinedUsers:
            try:
                await bot.send_photo(user, open('lzt.jpg', 'rb'), message.text[message.text.find(' '):])
                receive_users += 1
            except:
                block_users += 1
            await asyncio.sleep(0.4)
        await bot.send_message(message.chat.id, f"*–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ *\n"
                                                              f"–ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: *{receive_users}*\n"
                                                              f"–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: *{block_users}*", parse_mode='Markdown')



###################################            FSM              ###############################################
class meinfo(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()

@dp.message_handler(Command("me"), state=None)        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É /me –¥–ª—è –∞–¥–º–∏–Ω–∞.
async def enter_meinfo(message: types.Message):
    if message.chat.id == config.admin:               
        await message.answer("–Ω–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n"        # –ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É
                         "‚Ññ1 –í–≤–µ–¥–∏—Ç–µ –ª–∏–Ω–∫ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
        await meinfo.Q1.set()                                    # –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∂–¥–∞—Ç—å –Ω–∞—à –æ—Ç–≤–µ—Ç.

@dp.message_handler(state=meinfo.Q1)                                # –ö–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç –ø–æ–ª—É—á–∏—Ç –æ—Ç–≤–µ—Ç, –≤–æ—Ç —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer1=answer)                            # —Ç—É—Ç –∂–µ –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞—à –æ—Ç–≤–µ—Ç (–Ω–∞—à –ª–∏–Ω–∫)

    await message.answer("–õ–∏–Ω–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. \n"
                         "‚Ññ2 –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    await meinfo.Q2.set()                                    # –¥–∞–ª—å—à–µ –∂–¥—ë—Ç –ø–æ–∫–∞ –º—ã –≤–≤–µ–¥–µ–º —Ç–µ–∫—Å—Ç


@dp.message_handler(state=meinfo.Q2)                    # –¢–µ–∫—Å—Ç –ø—Ä–∏—à–µ–ª –∞ –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–æ–º—É —à–∞–≥—É
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text 
    await state.update_data(answer2=answer)                # –æ–ø—è—Ç—å –∂–µ –æ–Ω –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç

    await message.answer("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

    data = await state.get_data()                #
    answer1 = data.get("answer1")                # —Ç—É—Ç –æ–Ω —Å—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ "–ë–î" –∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Å–ª–µ–¥. —Å–æ–æ–±—â–µ–Ω–∏–∏
    answer2 = data.get("answer2")                #

    joinedFile = open("link.txt","w", encoding="utf-8")        # –í–Ω–æ—Å–∏–º –≤ "–ë–î" encoding="utf-8" –ù–£–ñ–ï–ù –î–õ–Ø –¢–û–ì–û, –ß–¢–û–ë–´ –ó–ê–ü–ò–°–´–í–ê–õ–ò–°–¨ –°–ú–ê–ô–õ–ò–ö–ò
    joinedFile.write(str(answer1))
    joinedFile = open("text.txt","w", encoding="utf-8")        # –í–Ω–æ—Å–∏–º –≤ "–ë–î" encoding="utf-8" –ù–£–ñ–ï–ù –î–õ–Ø –¢–û–ì–û, –ß–¢–û–ë–´ –ó–ê–ü–ò–°–´–í–ê–õ–ò–°–¨ –°–ú–ê–ô–õ–ò–ö–ò
    joinedFile.write(str(answer2))

    await message.answer(f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å : {answer1}\n–í–∞—à —Ç–µ–∫—Å—Ç:\n{answer2}')    # –ù—É –∏ –≤—ã–≤–æ–¥–∏–º –ª–∏–Ω–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –∑–∞–ø–∏—Å–∞–ª
    await state.finish()

####################################### –ë–ê–õ–ò–ö ####################################
@dp.message_handler(Command('balance'), state=None)
async def zxc(message: types.Message):
    if message.chat.id == config.admin:
        users1 = open('users.txt', encoding="utf-8")
        users = users1.read()
        await message.answer(f"–ö–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –¥–µ–Ω—é–∂–µ–∫?\n{users}")
        await meinfo.Q3.set()
@dp.message_handler(state=meinfo.Q3)
async def answer_q3(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer3=answer)
    await message.answer("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω—é–∂–µ–∫ –ø–æ–¥–∞—Ä–∏—Ç—å?")
    await meinfo.Q4.set()
@dp.message_handler(state=meinfo.Q4)
async def answer_q4(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer4=answer)
    await message.answer("–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ "+ answer)
    data = await state.get_data()
    answer3 = data.get('answer3')
    answer4 = data.get('answer4')
    joinedFile = open('balance.txt', 'w')
    joinedFile.write(answer3)
    joinedFile = open('balance.txt', 'w')
    joinedFile.write(answer4)

@dp.message_handler(content_types=['text'])
async def get_message(message):
    if message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await bot.send_message(message.chat.id, text = "–°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é o(^‚ñΩ^)o", parse_mode='Markdown')

    if message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await bot.send_message(message.chat.id, text = "–•–æ—á–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞?", reply_markup=keyboard.stats, parse_mode='Markdown')

    if message.text == "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫":
        link1 = open('link.txt', encoding="utf-8") # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å –Ω–∞—à–µ–π "–ë–î" –∏–Ω—Ñ—É, –ø–æ–º–µ—â–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –≤—ã–≤–æ–¥–∏–º –µ—ë
        link = link1.read()

        text1 = open('text.txt', encoding="utf-8") # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å –Ω–∞—à–µ–π "–ë–î" –∏–Ω—Ñ—É, –ø–æ–º–µ—â–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –≤—ã–≤–æ–¥–∏–º –µ—ë
        text = text1.read()

        await bot.send_message(message.chat.id, text = f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {link}\n{text}", parse_mode='Markdown')

    if message.text == "–°–µ—Ä–≤–∏—Å—ãüîß":
        await bot.send_message(message.chat.id, text = "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ* –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å—ã:", reply_markup=keyboard.serv)

######################################## CALLBACK_DATA ########################################
@dp.callback_query_handler(text_contains='join') # –ú–´ –ü–†–û–ü–ò–°–´–í–ê–õ–ò –í –ö–ù–û–ü–ö–ê–• –ö–ê–õ–õ–ë–≠–ö "JOIN" –ó–ù–ê–ß–ò–¢ –ò –¢–£–¢ –ú–´ –õ–û–í–ò–ú "JOIN"
async def join(call: types.CallbackQuery):
    if call.message.chat.id == config.admin:
        d = sum(1 for line in open('user.txt'))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞: *{d}* —á–µ–ª–æ–≤–µ–∫', parse_mode='Markdown')
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–¥–º–∏–Ω–∫–∏\n–ö—É–¥–∞ —Ç—ã –ø–æ–ª–µ–∑", parse_mode='Markdown')

@dp.callback_query_handler(text_contains='cancle') # –ú–´ –ü–†–û–ü–ò–°–´–í–ê–õ–ò –í –ö–ù–û–ü–ö–ê–• –ö–ê–õ–õ–ë–≠–ö "cancle" –ó–ù–ê–ß–ò–¢ –ò –¢–£–¢ –ú–´ –õ–û–í–ò–ú "cancle"
async def cancle(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= "–§–∞—Å—Ç–æ–º –≤ –ª–æ–±–±–∏", parse_mode='Markdown')

@dp.callback_query_handler(text_contains='nakr')
async def nakt(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‡≤•_‡≤•")
@dp.callback_query_handler(text_contains='bomb')
async def bomb(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‡≤•_‡≤•")

























##############################################################
if __name__ == '__main__':
    print('–ú–æ–Ω—Å—Ç—Ä –ø—á–µ–ª—ã –∑–∞–ø—É—â–µ–Ω!')                                    # –ß–¢–û–ë–´ –ë–û–¢ –†–ê–ë–û–¢–ê–õ –í–°–ï–ì–î–ê —Å –≤—ã–≤–æ–¥–æ–º –≤ –Ω–∞—á–∞–ª–µ –≤–∞—à–µ–≥–æ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
executor.start_polling(dp)
##############################################################